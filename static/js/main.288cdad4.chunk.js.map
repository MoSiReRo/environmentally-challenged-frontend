{"version":3,"sources":["Counter.js","TodayDate.js","Header.js","Graph.js","Challenge.js","TipLarge.js","Buttons.js","Main.js","MobileTip.js","Footer.js","UserProgressModal.js","App.js","serviceWorker.js","index.js"],"names":["Counter","className","style","fontWeight","fontSize","lineHeight","Math","floor","this","props","treeCounter","React","Component","TodayDate","state","currentDate","Date","markedDate","moment","format","setInterval","setState","date","day","time","callMe","Header","Graph","value","counter","maxValue","text","Challenge","message","dayEnd","isEndOfDay","successfulDay","todaysChallenge","challengeDesc","paddingTop","TipLarge","todaysChallengeTip","Buttons","newChallengeFunc","challengeAcceptedFunc","isAccepted","challengeCompletedFunc","finishDayFunc","type","onClick","Main","tips","MobileTip","Footer","yourProgressButton","changeThemes","UserProgressModal","emoji","completedChallengeCount","completedChallenges","length","stylePath","encouragementText","map","challenge","key","challengeId","closeModalFunc","aria-hidden","class","App","uncompletedChallenges","completed","userId","accepted","isCompleted","showModal","newChallenge","challenges","randomChallenge","random","challengeAccepted","acceptedChallenge","id","axios","put","then","response","catch","error","console","log","challengeCompleted","completedChallenge","doneChallengeList","push","finishDay","failedChallenge","changeStyles","handleOpenModal","handleCloseModal","get","data","filter","e","undefined","timeLeft","currentTime","getTime","execTime","setHours","interval","timeout","setTimeout","clearInterval","rel","href","process","isOpen","contentLabel","closeTimeoutMS","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.288cdad4.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Counter extends React.Component {\n\n    // treesGrown = () => {\n    //     let achievedNumber = this.state.completedChallenges.length;\n    //     let trees = (achievedNumber / 3);\n    //     return trees;\n    //   }\n\n    render() {\n        \n        return (\n            <div className=\"row\">\n                <div className=\"col-12 counter\">\n            Trees <br /> Planted: <br /> <span style={{fontWeight: '500', fontSize: '2.5em', lineHeight: '1.1'}}>{Math.floor(this.props.treeCounter / 21)}</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Counter;","import React from 'react';\nimport moment from 'moment';\n\nclass TodayDate extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          currentDate: new Date(),\n          markedDate: moment(new Date()).format(\"DD-MM_YYYY\")\n        };\n      }\n\n    callMe(){\n      setInterval(() => {\n        this.setState({date : new Date()})\n      }, 1000);\n    }  \n\n    render() {\n\n        const day = moment().format(\"dddd\");\n        const date = moment().format(\"D MMMM YYYY\");\n        const time = moment().format(\"h:mm a\");\n        return (\n            <div className=\"col-md-3 dateTime\">\n            <span style={{fontWeight: '500'}} >{day} {date}</span> <br /> {time}\n            {this.callMe()}\n         </div>\n        );\n    }\n}\n\nexport default TodayDate;\n\n\n\n\n","import React from 'react';\nimport TodayDate from './TodayDate';\n\n\nclass Header extends React.Component {\n\n\n\n    render() {\n        return (\n            <div className=\"row\">\n         <div className=\"col-12 col-md-9 title\">\n            <h1>Environmentally <br />\n               Challenged</h1>\n         </div>\n         \n         <TodayDate/>\n      </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\n\n\nclass Graph extends React.Component {\n\n    render() {\n\n        const value = this.props.counter % 21\n        \n        return (\n            <div>\n                <CircularProgressbarWithChildren value={value}\n                    maxValue={21}\n                    text={`Completed: ${value}`} >\n                </CircularProgressbarWithChildren>\n            </div>\n        )\n    }\n}\n\nexport default Graph;\n\n\n// JAMES'S SUGGESTION\n// import React from 'react';\n// import { CircularProgressbarWithChildren } from 'react-circular-progressbar';\n// class Graph extends React.Component {\n//     render() {\n//         const value = this.props.counter\n//         const tasksPerTree = 21;\n//         // Need to work out how many tasks we've completed in this block \n//         let blocksOfTasksCompleted = Math.floor(value / tasksPerTree);\n//         // Then we take the difference between the completed tasks in block and completed tasks\n//         let tasksRemaining = value - (blocksOfTasksCompleted * tasksPerTree);\n//         return (\n//             <div>\n//                 <CircularProgressbarWithChildren value={tasksRemaining}\n//                     maxValue={tasksPerTree}\n//                     text={`Completed: ${tasksRemaining}`} >\n//                 </CircularProgressbarWithChildren>\n//             </div>\n//         )\n//     }\n// }\n// export default Graph;\n","import React from 'react';\n\n\nclass Challenge extends React.Component {\n\n    render() {\n\n        const dayEnd = this.props.isEndOfDay;\n        const successfulDay = this.props.successfulDay;\n        let message;\n\n        if (dayEnd && successfulDay) {\n            message = \"Well done! See you tomorrow!\";\n        } else if (dayEnd && successfulDay === false) {\n            message = \"Try again tomorrow - see you then!\"\n        } else {\n            message = `Today's Challenge: \\n${this.props.todaysChallenge.challengeDesc}`;\n        }\n\n        return (\n            <div>\n                <p style={{fontWeight: '500', lineHeight: '1.1em', paddingTop: '0.3em'}} >{message}</p>\n            </div>\n        )\n        \n    }\n}\n\nexport default Challenge;\n\n\n\n\n","import React from 'react';\n\n\nclass TipLarge extends React.Component {\n\n    render() {\n        return (\n            <div className=\"col-12 tipHint d-none d-md-block\">\n                {this.props.todaysChallengeTip}\n            </div>\n        );\n    }\n}\n\nexport default TipLarge;","import React from 'react';\n\nclass Buttons extends React.Component {\n\n    // newChallenge = () => {\n    //     this.props.newChallengeFunc(this.props.newChallenge);\n    // }\n\n    // challengeAccepted = () => {\n    //     this.props.challengeAcceptedFunc(this.props.challengeAccepted);\n    // }\n\n    render() {\n        const { newChallengeFunc, challengeAcceptedFunc, isAccepted, challengeCompletedFunc, finishDayFunc, isEndOfDay } = this.props\n        return (\n            <div className=\"row\">\n                <div className=\"col-6 leftButtonBox\">\n                    {!isEndOfDay &&\n                        <input type=\"button\"\n                            className=\"btn accept\"\n                            value={isAccepted ? \"I did it!\" : \"Accept\"}\n                            onClick={isAccepted ? challengeCompletedFunc : challengeAcceptedFunc}\n                        />\n                    }\n                </div>\n                <div className=\"col-6 rightButtonBox\">\n                    {!isEndOfDay &&\n                        <input type=\"button\"\n                            className=\"btn tryAnother\"\n                            value={isAccepted ? \" Try another time\" : \"Try Another\"}\n                            onClick={isAccepted ? finishDayFunc : newChallengeFunc}\n                        />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Buttons;\n\n\n","import React from 'react';\nimport Graph from './Graph';\nimport Challenge from './Challenge';\nimport TipLarge from './TipLarge';\nimport Buttons from './Buttons';\n\n\nclass Main extends React.Component {\n\n   render() {\n      return (\n         <div>\n            <div className=\"row\">\n               <div className=\"col-12 graph challenge\">\n                  <Graph\n                     counter={this.props.counter} />\n                  <Challenge\n                     todaysChallenge={this.props.todaysChallenge}\n                     newChallengeFunc={this.props.newChallengeFunc}\n                     isEndOfDay={this.props.isEndOfDay}\n                     successfulDay={this.props.successfulDay}\n                  />\n               </div>\n            </div>\n            <div className=\"row\">\n               <div className=\"col-12 boxForButtons\"> \n                  <Buttons\n                     newChallengeFunc={this.props.newChallengeFunc}\n                     challengeAcceptedFunc={this.props.challengeAcceptedFunc}\n                     challengeCompletedFunc={this.props.challengeCompletedFunc}\n                     isAccepted={this.props.isAccepted}\n                     isEndOfDay={this.props.isEndOfDay}\n                     successfulDay={this.props.successfulDay}\n                     finishDayFunc={this.props.finishDayFunc}\n                  />\n               </div>\n               <TipLarge\n                  todaysChallengeTip={this.props.todaysChallenge.tips}\n               />\n\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Main;","import React from 'react';\n\nclass MobileTip extends React.Component {\n\nrender() {\n    return (\n<div className=\"row\">\n         <div className=\"col-12 col-md-3 tipHintMobile d-lg-none d-md-none\">\n            {this.props.todaysChallengeTip}\n         </div>\n      </div>\n    )\n}\n}\n\nexport default MobileTip;","import React from 'react';\n\nclass Footer extends React.Component {\n\n    render() {\n\n\n        return (\n\n            <div className=\"row\">\n                <div className=\"col-9 col-md-8 col-lg-9 footer footerText\">\n                    <span style={{ fontWeight: '500' }} >Environmentally Challenged</span> collaborates with <span style={{ fontWeight: '500' }} >ABC</span>, a tree-planting organisation who plant real trees on Earth.\n                    <br />When you complete <span style={{ fontWeight: '500' }} >21 challenges</span>, not only do you make a difference, they'll go out and plant a real tree.\n                </div>\n                <div className=\"col-3 col-md-4 col-lg-3 footer\">\n                    <div className=\"row text-center\">\n                        <div className=\"col-md-6\">\n                            {/* Temporary button for changing themes - change to drop down in footer? */}\n                            <button type=\"button\" className=\"btn themesButton\" onClick={this.props.yourProgressButton}>Progress</button>\n                        </div>\n                        <div className=\"col-md-6\">\n                            {/* Temporary button for changing themes - change to drop down in footer? */}\n                            <button type=\"button\" className=\"btn themesButton\" onClick={this.props.changeThemes}>Themes</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React from 'react';\n\nclass UserProgressModal extends React.Component {\n    render() {\n        const completedChallengeCount = this.props.completedChallenges.length;\n\n\n        let emoji;\n        if (this.props.stylePath === \"styles.css\") {\n            emoji = \"⭐\";\n        } else if (this.props.stylePath === \"styleFerns.css\") {\n            emoji = \"🌿\"\n        } else {\n            emoji = \"☆\";\n        } \n        const completedChallenges = this.props.completedChallenges.map((challenge, key) =>\n            <p key={challenge.challengeId}>{emoji} {challenge.challengeDesc} {emoji}</p>\n        );\n\n\n        // Add in conditional rendering based on # of tasks completed\n        // 0 tasks = You haven't completed any tasks yet\n        // 1-5 = Great start, etc.\n        let encouragementText;\n        if (completedChallengeCount === 0) {\n            encouragementText = `You haven't completed any challenges yet. \\nWhy not give it a go? Helping to save the world is easier than you think!`;\n        } else if (completedChallengeCount === 1) {\n            encouragementText = `You've completed 1 challenge so far. \\nThat's a great start, why not try a few more?`;\n        } else if (completedChallengeCount > 1 && completedChallengeCount < 7) {\n            encouragementText = `You've completed ${completedChallengeCount} challenges so far. \\nThat's a great start, why not try a few more?`;\n        } else if (completedChallengeCount >= 7 && completedChallengeCount < 21) {\n            encouragementText = `You've completed ${completedChallengeCount} challenges so far. \\nWow, great job! Keep up all the great work.`\n        } else if (completedChallengeCount >= 21 && completedChallengeCount < 42) {\n            encouragementText = `You've completed ${completedChallengeCount} challenges so far. \\nIncredible! That means we've planted one tree thanks to you.\\nYour actions are making a huge difference to the world.`\n        } else if (completedChallengeCount >= 42 ) {\n            encouragementText = `You've completed ${completedChallengeCount} challenges so far. \\nIncredible! That means we've planted ${Math.floor(completedChallengeCount/21)} trees thanks to you.\\nYour actions are making a huge difference to the world.`\n        } else {\n            encouragementText = `You've completed ${completedChallengeCount} challenges so far.`;\n        } \n\n\n        return (\n            <div>\n                    <button className=\"close\" type=\"button\" onClick={this.props.closeModalFunc}>\n                        <span aria-hidden=\"true\">×</span>\n                        <span class=\"sr-only\">Close</span>\n                    </button>\n\n                <p className=\"ModalTitle\">Your Progress</p>\n                <p className=\"ModalText\">{ encouragementText }</p>\n                <p className=\"ModalText\">\n                    \n                    {completedChallenges}\n\n                    <button className=\"btn closeModalButton\" onClick={this.props.closeModalFunc}>Close</button>\n                </p>\n            </div>\n        )\n\n    }\n}\n\nexport default UserProgressModal;\n\n\n\n\n","import React from 'react';\nimport Counter from './Counter';\nimport Header from './Header';\nimport Main from './Main';\nimport MobileTip from './MobileTip';\nimport Footer from './Footer';\nimport UserProgressModal from './UserProgressModal';\nimport axios from 'axios';\nimport ReactModal from 'react-modal';\n\nclass App extends React.Component {\n\n  state = {\n    uncompletedChallenges: [\n    ],\n    completedChallenges: [\n\n    ],\n    todaysChallenge: {\n      challengeId: \"1\",\n      challengeDesc: \"None selected yet - click 'Try Another'\",\n      completed: 0,\n      userId: 1,\n      accepted: 0,\n      // Need a default statement for tips - corny, but something like this?\n      tips: \"Be the change you want to see in the world\"\n    },\n    isAccepted: false,\n    isCompleted: false,\n    isEndOfDay: false,\n    successfulDay: false,\n    stylePath: \"styles.css\",\n    showModal: false\n  };\n\n  componentWillMount() {\n    setInterval(this.date, 1000)\n  }\n\n  componentDidMount() {\n\n    axios.get('https://wqsn40ohub.execute-api.eu-west-2.amazonaws.com/dev/challenge')\n      .then(response => {\n        const uncompletedChallenges = response.data.challenge.filter((e) => {\n          return e.completed === 0;\n        });\n        const completedChallenges = response.data.challenge.filter((e) => {\n          return e.completed === 1;\n        });\n        // handle success\n        this.setState({\n          uncompletedChallenges: uncompletedChallenges,\n          completedChallenges: completedChallenges\n        });\n      })\n      .catch(error => {\n        //handle error\n        console.error(error);\n      });\n\n\n    axios.get('https://wqsn40ohub.execute-api.eu-west-2.amazonaws.com/dev/accepted-challenge')\n      .then(response => {\n        let acceptedChallenge = response.data.challenge[0];\n        if (acceptedChallenge !== undefined) {\n          this.setState({\n            todaysChallenge: acceptedChallenge,\n            isAccepted: true\n          });\n        }\n      })\n      .catch(error => {\n        //handle error\n        console.error(error);\n      });\n\n\n    // generates random task at given time every 24hrs\n    const currentTime = new Date().getTime();  //current unix timestamp\n    const execTime = new Date().setHours(20, 37, 0, 0);  //API call time = today at 05:00\n    let timeLeft;\n    if (currentTime < execTime) {\n      //it's currently earlier than 05:00\n      timeLeft = execTime - currentTime;\n    } else {\n      //it's currently later than 05:00, schedule for tomorrow at 05:00\n      timeLeft = execTime + 86400000 - currentTime\n    }\n    this.interval = setInterval(() => this.newChallenge(), 86400000);\n    this.timeout = setTimeout(() => this.newChallenge(), timeLeft);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n\n  // Picks a random challenge from the array when 'Try Another' button is clicked\n  // Also same function used to generate challenge at start of day\n  newChallenge = () => {\n    const challenges = this.state.uncompletedChallenges;\n    const i = (Math.floor(Math.random() * challenges.length));\n    const randomChallenge = challenges[i];\n    this.setState({\n      todaysChallenge: randomChallenge\n    })\n    return randomChallenge;\n  }\n\n  challengeAccepted = () => {\n    // get todaysChallenge from state\n    const acceptedChallenge = this.state.todaysChallenge;\n    const id = acceptedChallenge.challengeId;\n    // update accepted: 1 (use 0/1 rather than false/true bc that's how SQL stores booleans)\n    acceptedChallenge.accepted = 1;\n\n    axios.put(`https://wqsn40ohub.execute-api.eu-west-2.amazonaws.com/dev/challenge/${id}`, acceptedChallenge)\n      .then(response => {\n\n        // update state\n        this.setState({\n          todaysChallenge: acceptedChallenge,\n          isAccepted: true\n        });\n      })\n      .catch(error => {\n        //handle error\n        console.error(error);\n        console.log(acceptedChallenge)\n      });\n\n\n  }\n\n\n  challengeCompleted = () => {\n    // get todaysChallenge from state\n    const completedChallenge = this.state.todaysChallenge;\n    const id = completedChallenge.challengeId;\n\n    // update completed: 1\n    completedChallenge.completed = 1;\n\n    axios.put(`https://wqsn40ohub.execute-api.eu-west-2.amazonaws.com/dev/challenge/${id}`, completedChallenge)\n      .then(response => {\n\n        // update state\n        this.setState({\n          todaysChallenge: completedChallenge,\n          isCompleted: true,\n          isEndOfDay: true,\n          successfulDay: true\n        });\n        // get array of completed challenges\n        const doneChallengeList = this.state.completedChallenges;\n        // push todaysChallenge into completed array\n        doneChallengeList.push(completedChallenge);\n        // update state of completed array, counter then counts it\n        this.setState({\n          completedChallenges: doneChallengeList\n        });\n\n\n      })\n      .catch(error => {\n        //handle error\n        console.error(error);\n      });\n\n\n  }\n\n\n  // function that runs if you don't complete an accepted challenge\n  // finishes day, hiding buttons and leaving failed challenge to be regenerated\n  finishDay = () => {\n    // get todaysChallenge from state\n    const failedChallenge = this.state.todaysChallenge;\n    const id = failedChallenge.challengeId;\n\n    // keep completed as 0\n    failedChallenge.completed = 0;\n\n    // Set accepted back to 0\n    failedChallenge.accepted = 0;\n\n    // update state to end of day so button disappears on click\n    // Put request so accepted = 0 will update database\n\n    axios.put(`https://wqsn40ohub.execute-api.eu-west-2.amazonaws.com/dev/challenge/${id}`, failedChallenge)\n      .then(response => {\n        this.setState({\n          isEndOfDay: true\n        });\n      })\n      .catch(error => {\n        //handle error\n        console.error(error);\n        console.log(failedChallenge)\n      });\n  }\n\n\n  changeStyles = () => {\n    if (this.state.stylePath === \"styles.css\") {\n      this.setState({\n        stylePath: \"styleFerns.css\"\n      });\n    } else if (this.state.stylePath === \"styleFerns.css\") {\n      this.setState({\n        stylePath: \"styleAccessibility.css\"\n      });\n    } else if (this.state.stylePath === \"styleAccessibility.css\") {\n      this.setState({\n        stylePath: \"styles.css\"\n      });\n    }\n\n  }\n\n\n  handleOpenModal = () => {\n    this.setState({ showModal: true });\n  }\n\n  handleCloseModal = () => {\n    this.setState({ showModal: false });\n  }\n\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n      \n        {/* Stylesheet needs to be here so it can update from state*/}\n        <link rel=\"stylesheet\" type=\"text/css\" href={process.env.PUBLIC_URL + '/' + this.state.stylePath} />  \n        <Header/>\n        <Counter\n          treeCounter={this.state.completedChallenges.length}\n        />\n        <ReactModal\n          isOpen={this.state.showModal}\n          contentLabel=\"Your Progress Modal\"\n          closeTimeoutMS={200}\n          className=\"Modal\"\n        >\n          <UserProgressModal\n            completedChallenges={this.state.completedChallenges}\n            closeModalFunc={this.handleCloseModal}\n            stylePath={this.state.stylePath}\n          />\n        </ReactModal>\n        <Main\n          todaysChallenge={this.state.todaysChallenge}\n          newChallengeFunc={this.newChallenge}\n          challengeAcceptedFunc={this.challengeAccepted}\n          challengeCompletedFunc={this.challengeCompleted}\n          isAccepted={this.state.isAccepted}\n          isEndOfDay={this.state.isEndOfDay}\n          successfulDay={this.state.successfulDay}\n          finishDayFunc={this.finishDay}\n          counter={this.state.completedChallenges.length}\n        />\n        <MobileTip\n          todaysChallengeTip={this.state.todaysChallenge.tips}\n        />\n        <Footer\n          changeThemes={this.changeStyles}\n          yourProgressButton={this.handleOpenModal}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}